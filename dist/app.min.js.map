{"version":3,"sources":["app.js"],"names":["mongoose","require","config","express","check","session","bodyParser","PORT","set","validationResult","env","MongoDB_CONNECT_URI","app","question","urlencoded","use","json","extended","maxAge","req","res","secret","login","resave","not","isEmpty","isAlpha","isLength","min","withMessage","get","value","body","password","isEmail","normalizeEmail","getBranchDetails","errors","status","jsonp","array","db","insert","post","undefined","send","redirect","render","serveSubject","subject","submitAnswer","serveFaculty","addQuestion","editQuestion","deleteQuestion","console","username","sess","destroy","log","listen","error"],"mappings":"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","file":"app.min.js","sourcesContent":["const mongoose = require('mongoose');\r\nrequire('dotenv').config();\r\nconst db = require('./models/manage');\r\nconst express = require('express');\r\nconst bodyParser = require('body-parser');\r\n// const expressValidator = require(\"express-validator\");\r\nconst { check, validationResult } = require('express-validator')\r\nvar session = require('express-session');\r\nconst question = require('./models/question');\r\n\r\nconst app = express();\r\nconst PORT = 8080;\r\n\r\nmongoose.set('strictQuery', false);\r\n// mongoose.connect(\"mongodb://127.0.0.1:27017/user\");\r\nmongoose.connect(process.env.MongoDB_CONNECT_URI);\r\n\r\n\r\napp.set('view engine', 'pug');\r\napp.use(express.static('public'))\r\n\r\napp.use(bodyParser.urlencoded({\r\n    extended: true\r\n}));\r\napp.use(bodyParser.json());\r\napp.use(session({\r\n    secret: 'Star boyoyo44',\r\n    resave: false,\r\n    saveUninitialized: true,\r\n    cookie: { maxAge: 300000 }\r\n}))\r\n\r\napp.get('/', function (req, res) {\r\n    req.session.login = false;\r\n    db.getBranchDetails(req, res);\r\n});\r\n\r\napp.post('/SignUp',\r\n    check('username').not().isEmpty().isAlpha().isLength({ min: 5 }).withMessage('User name must be 5 characters'),\r\n    check('password').not().isEmpty().isLength({ min: 6 }).withMessage('Password name must be 6 characters'),\r\n    check('cpassword').custom((value, { req }) => (value === req.body.password)).withMessage(\"Confirm password not match with your password\"),\r\n    check('email').not().isEmpty().isEmail().normalizeEmail().withMessage(\"Enetr proper email\"),\r\n    check('branch').not().isEmpty().isAlpha().withMessage('Invalid Branch'),\r\n    function (req, res) {\r\n        const errors = validationResult(req);\r\n        if (!errors.isEmpty()) {\r\n            return res.status(422).jsonp(errors.array());\r\n        }\r\n        else {\r\n            db.insert(req, res);\r\n        }\r\n    });\r\n\r\napp.post('/Login', function (req, res) {\r\n    db.login(req, res);\r\n})\r\n\r\napp.get('/Student', function (req, res) {\r\n    if (req.session.login==undefined ||req.session.login === false) {\r\n        res.send(\"<script>alert('Session no longer exists')</script>\");\r\n        res.redirect(\"/Logout\");\r\n    }\r\n    res.render(\"student\", req.session);\r\n})\r\n\r\napp.get('/Subject', function (req, res) {\r\n    db.serveSubject(req,res);\r\n    \r\n})\r\n\r\n\r\n\r\napp.post('/Subject', function (req, res) {\r\n    if (req.session.login==undefined ||req.session.login === false) {\r\n        res.send(\"<script>alert('Session no longer exists')</script>\");\r\n    }\r\n    req.session.subject = req.body.subject;\r\n    res.redirect('/Subject?subject=' + req.session.subject)\r\n})\r\n\r\napp.post('/answer', function (req, res) {\r\n    db.submitAnswer(req, res);\r\n})\r\n\r\napp.get('/Faculty', function (req, res) {\r\n    db.serveFaculty(req,res);\r\n   \r\n})\r\n\r\napp.post('/AddQuestion', function (req, res) {\r\n    db.addQuestion(req, res);\r\n})\r\napp.post('/EditQuestion', function (req, res) {\r\n    db.editQuestion(req, res);\r\n})\r\napp.post('/DeleteQuestion', function (req, res) {\r\n    db.deleteQuestion(req, res);\r\n})\r\n\r\napp.get('/logout', function (req, res) {\r\n    sess = req.session;\r\n    console.log(sess.username+\" LOGED OUT\");\r\n    sess.destroy();\r\n    sess.login = false;\r\n    res.redirect('/')\r\n})\r\napp.listen(PORT, (error) => {\r\n    if (!error) {\r\n        console.log(\"Server is Successfully Running\")\r\n    }\r\n    else {\r\n        console.log(\"Error occurred, server can't start\", error);\r\n    }\r\n}\r\n);"]}