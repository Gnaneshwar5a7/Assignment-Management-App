{"version":3,"sources":["manage.js"],"names":["mongoose","require","model","user","question","answer","set","branches","req","res","branch","find","err","docs","console","log","subject","getBranchDetails","element","indexOf","push","subjects","forEach","i","sort","render","data","insert","newUser","body","username","genSaltSync","bcrypt","password","hash","email","name","fullname","userType","hashSync","result","redirect","login","sess","session","findOne","userId","id","option","send","serveFaculty","undefined","questions","answerDocs","j","length","x","usersubmitions","doc","serveSubject","query","questionDocs","answers","submitions","pending","submitAnswer","newAnswer","newQuestion","save","findOneAndUpdate","oldquestion","question_","deleteQuestion","findOneAndRemove","question_del","module","addQuestion","editQuestion"],"mappings":"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","file":"manage.min.js","sourcesContent":["const mongoose = require('mongoose');\r\nconst { model } = require('mongoose');\r\nconst bcrypt = require('bcrypt');\r\nconst user = require('./user');\r\nconst question = require('./question');\r\nconst branch = require('./branch');\r\nconst answer = require('./answers');\r\n\r\nmongoose.set('strictQuery', true);\r\n\r\nvar branches = [];\r\nfunction getBranchDetails(req, res) {\r\n    branch.find(function (err, docs) {\r\n        if (err) {\r\n            console.log(err);\r\n        }\r\n        else {\r\n            branches = docs;\r\n            var subject = []\r\n            var branch = []\r\n            docs.forEach(element => {\r\n                if (branch.indexOf(element.branch == -1)) {\r\n                    branch.push(element.branch);\r\n                }\r\n                element.subjects.forEach(i => {\r\n                    if (subject.indexOf(i) == -1) {\r\n                        subject.push(i);\r\n                    }\r\n                });\r\n            });\r\n            subject.sort();\r\n            branch.sort();\r\n            res.render(\"index\", { data: docs, subject: subject });\r\n        }\r\n    });\r\n}\r\n\r\nfunction insert(req, res) {\r\n    const newUser = new user();\r\n    newUser.username = req.body.username;\r\n\r\n\r\n    var salt = bcrypt.genSaltSync(10);\r\n    var hash = bcrypt.hashSync(req.body.password, salt);\r\n\r\n    newUser.password = hash;\r\n\r\n    newUser.email = req.body.email;\r\n    newUser.name = req.body.fullname;\r\n    newUser.branch = req.body.branch;\r\n    if (req.body.userType == 'Faculty') {\r\n        newUser.subject = req.body.subject;\r\n    }\r\n    newUser.userType = req.body.userType;\r\n\r\n    newUser.save(function (err, result) {\r\n\r\n        if (err) {\r\n\r\n            console.log(err);\r\n        }\r\n        else {\r\n            res.redirect(\"/\");\r\n        }\r\n\r\n    })\r\n}\r\n\r\nfunction login(req, res) {\r\n    var sess = req.session;\r\n    user.findOne({ username: req.body.username }, function (err, docs) {\r\n        if (err) {\r\n            console.log(err)\r\n        }\r\n        else {\r\n            if (docs.username == req.body.username) {\r\n                bcrypt.compare(req.body.password, docs.password, function (err, data) {\r\n                    if (err) {\r\n                        console.log(err);\r\n                    }\r\n                    if (data) {\r\n                        console.log(docs.username+\" LOGED IN\")\r\n                        if (docs.userType === \"Faculty\") {\r\n                            sess.userId = docs.id;\r\n                            sess.username = docs.username;\r\n                            req.session.fullname = docs.fullname;\r\n                            req.session.subject = docs.subject;\r\n                            req.session.branch = docs.branch;\r\n                            req.session.login = true;\r\n                            res.redirect('/Faculty')\r\n                        }\r\n                        else {\r\n                            var subjects = []\r\n                            branches.forEach(i => {\r\n                                if (i.branch == docs.branch) {\r\n                                    subjects = i.subjects\r\n                                }\r\n                            })\r\n                            req.session.subjects = subjects;\r\n                            req.session.userId = docs.id;\r\n                            req.session.username = docs.username;\r\n                            req.session.fullname = docs.fullname;\r\n                            req.session.option = docs.branch;\r\n                            req.session.login = true;\r\n                            res.redirect('/Student');\r\n                        }\r\n                    }\r\n                    else {\r\n                        res.send(\"invalid password\");\r\n                    }\r\n\r\n                });\r\n            }\r\n            else {\r\n                res.send(\"invalid username or password\")\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\n\r\nfunction serveFaculty(req, res) {\r\n    if (req.session.login==undefined || req.session.login == false) {\r\n        res.send(\"<script>alert('Session no longer exists')</script>\")\r\n    }\r\n    question.find({ subject: req.session.subject }, function (err, questions) {\r\n        if (err) {\r\n            console.log(err);\r\n        }\r\n        else {\r\n            answer.find({ subject: req.session.subject }, function (err, answerDocs) {\r\n                if (err) {\r\n                    console.log(err);\r\n                }\r\n                else {\r\n                    req.session.questions = []\r\n                    req.session.usersubmitions = []\r\n                    for (var j = 0; j < questions.length; j++) {\r\n                        var question = questions[j].question\r\n                        req.session.questions.push(question);\r\n                        var x = [];\r\n                        for (var i = 0; i < answerDocs.length; i++) {\r\n                            if (answerDocs[i].question == question) {\r\n                                var doc = {}\r\n                                doc.username = answerDocs[i].username;\r\n                                doc.answer = answerDocs[i].answer;\r\n                                doc.question = answerDocs[i].question;\r\n                                x.push(doc);\r\n                            }\r\n                        }\r\n                        if (req.session.usersubmitions.indexOf(x) == -1) {\r\n                            req.session.usersubmitions.push(x);\r\n                        }\r\n                    }\r\n                    var data = { username: req.session.username, option: req.session.subject, questions: req.session.questions, usersubmitions: req.session.usersubmitions }\r\n                    res.render(\"faculty\", data);\r\n                }\r\n            })\r\n        }\r\n    })\r\n}\r\n\r\nfunction serveSubject(req, res) {\r\n    answer.find(function (err, answerDocs) {\r\n        if (err) {\r\n            console.log(err);\r\n        }\r\n        else {\r\n            question.find(function (err, questionDocs) {\r\n                if (err) {\r\n                    console.log(err);\r\n                }\r\n                else {\r\n                    if (req.session.login==undefined ||req.session.login == false) {\r\n                        res.send(\"<script>alert('Session no longer exists')</script>\")\r\n                    }\r\n                    req.session.subject = req.query.subject;\r\n                    req.session.questions = []\r\n                    for (var i = 0; i < questionDocs.length; i++) {\r\n                        if (questionDocs[i].subject == req.session.subject) {\r\n                            if (req.session.questions.indexOf(questionDocs[i].question) == -1) {\r\n                                req.session.questions.push(questionDocs[i].question);\r\n                            }\r\n                        }\r\n                    }\r\n                    req.session.answers = []\r\n                    req.session.submitions = []\r\n                    req.session.pending = []\r\n                    for (var i = 0; i < answerDocs.length; i++) {\r\n                        if (answerDocs[i].subject == req.session.subject && answerDocs[i].username == req.session.username) {\r\n                            if (req.session.submitions.indexOf(answerDocs[i].question) == -1) {\r\n                                req.session.submitions.push(answerDocs[i].question);\r\n                            }\r\n                            if (req.session.answers.indexOf(answerDocs[i].answer) == -1) {\r\n                                req.session.answers.push(answerDocs[i].answer);\r\n                            }\r\n                        }\r\n                    }\r\n                    req.session.questions.forEach(element => {\r\n                        if (req.session.submitions.indexOf(element) == -1) {\r\n                            req.session.pending.push(element)\r\n                        }\r\n                    });\r\n                    res.render('subject', req.session);\r\n                }\r\n            })\r\n        }\r\n    })\r\n\r\n}\r\n\r\nfunction submitAnswer(req, res) {\r\n    const newAnswer = new answer();\r\n    newAnswer.username = req.session.username;\r\n    newAnswer.subject = req.session.subject;\r\n    newAnswer.question = req.body.question;\r\n    newAnswer.answer = req.body.answer;\r\n    newAnswer.save(function (err, result) {\r\n        if (err) {\r\n\r\n            console.log(err);\r\n        }\r\n        else {\r\n\r\n            res.redirect('/Subject?subject=' + req.session.subject);\r\n        }\r\n    })\r\n}\r\n\r\nfunction addQuestion(req, res) {\r\n    const newQuestion = new question();\r\n    if (req.session.login==undefined ||req.session.login === false) {\r\n        res.send(\"<script>alert('Session no longer exists')</script>\");\r\n    }\r\n    newQuestion.subject = req.session.subject;\r\n    newQuestion.question = req.body.question;\r\n    newQuestion.save(function (err, result) {\r\n        if (err) {\r\n            console.log(err);\r\n        }\r\n        else {\r\n            req.session.question = newQuestion.question;\r\n            res.redirect('/Faculty');\r\n        }\r\n    })\r\n\r\n}\r\n\r\nfunction editQuestion(req, res) {\r\n    if (req.session.login==undefined ||req.session.login === false) {\r\n        res.send(\"<script>alert('Session no longer exists')</script>\");\r\n    }\r\n    question.findOneAndUpdate({ question: req.body.oldquestion, subject: req.body.subject }, { question: req.body.question_ }, function (err, result) {\r\n        if (err) {\r\n            console.log(err);\r\n        }\r\n    });\r\n    answer.updateMany({ question: req.body.oldquestion, subject: req.body.subject }, { question: req.body.question_ }, function (err, result) {\r\n        if (err) {\r\n            console.log(err);\r\n        }\r\n    })\r\n    res.redirect('/Faculty');\r\n}\r\n\r\n\r\n\r\nfunction deleteQuestion(req, res) {\r\n    if (req.session.login==undefined ||req.session.login === false) {\r\n        res.send(\"<script>alert('Session no longer exists')</script>\");\r\n    }\r\n    question.findOneAndRemove({ question: req.body.question_del, subject: req.body.subject }, function (err, result) {\r\n        if (err) {\r\n            console.log(err);\r\n        }\r\n        else {\r\n            ;\r\n        }\r\n    })\r\n    answer.deleteMany({ question: req.body.question_del, subject: req.body.subject }, function (err, result) {\r\n        if (err) {\r\n            console.log(err);\r\n        }\r\n        else {\r\n            ;\r\n        }\r\n    });\r\n    res.redirect('/Faculty')\r\n\r\n}\r\n\r\n\r\nmodule.exports = { insert, login, submitAnswer, serveSubject, serveFaculty,addQuestion, editQuestion, deleteQuestion, getBranchDetails, branches };"]}